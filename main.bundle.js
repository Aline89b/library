/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var t={426:(t,r,n)=>{"use strict";n.d(r,{Z:()=>c});var e=n(537),o=n.n(e),i=n(645),a=n.n(i)()(o());a.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap);"]),a.push([t.id,"body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: 'Permanent Marker', Sans-serif, Arial;\r\n  color: black;\r\n  text-shadow: 8px 4px 8px  #eee;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-image: linear-gradient(rgba(255,255,255,0.4), rgba(255,255,255,0.4)), url(https://wallup.net/wp-content/uploads/2015/06/Fantasy-library-art-748x435.jpg);\r\n  filter: contrast(1.5);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  width: 80%;\r\n  border: 2px solid black;\r\n  margin:0 auto;\r\n  height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n\r\nheader {\r\n  margin-top: -10%;\r\n  text-align: center;\r\n}\r\nmain {\r\n  margin-top: 10%;\r\n  display:flex;\r\n  flex-direction: column;\r\n\r\n}\r\n\r\n#title {\r\n  all: unset;\r\n  max-width: 300px;\r\n  align-self: center;\r\n  box-shadow: 2px 2px 4px 6px #eee;\r\n  margin-top: 5px;\r\n  border: 1px solid #000;\r\n  height: 30px;\r\n  border: 5px;\r\n}\r\n\r\n#title::placeholder {\r\n  text-align: center;\r\n  color: #000;\r\n}\r\n label{\r\n  align-self: center;\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n}\r\n\r\n#title:focus {\r\n  background-color:lightpink;\r\n}\r\n.list {\r\n  list-style: none;\r\n  margin-left: 10px;\r\n}\r\n.list a {\r\n  color: #000;\r\n  margin: 10px;\r\n}\r\n\r\n#search-btn {\r\n  all: unset;\r\n  max-width: 200px;\r\n  align-self: center;\r\n  text-align: center;\r\n  margin-top: 13px;\r\n  padding: 5px;\r\n  background: linear-gradient(to left, green, yellow);\r\n  border: 1px solid #000;\r\n  border-radius: 15px;\r\n  box-shadow: 0 5px 8px green;\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n\r\n}\r\n#display-list {\r\n  margin: 0 auto;\r\n  width: 80%;\r\n  text-align:center;\r\n\r\n}\r\n.display-plot {\r\n  display: none;\r\n  background-color: black;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  width: 60%;\r\n  text-align: center;\r\n  border: 2px solid #000;\r\n  box-shadow: 0 5px 8px 10px #eee;\r\n  color: #fff;\r\n}\r\n#close-btn {\r\n  width: 20px;\r\n  height: 20px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n\r\n}\r\n.plot {\r\n  font: italic bold 18px Georgia, serif;\r\n  text-shadow: none;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,SAAS;EACT,UAAU;EACV,kDAAkD;EAClD,YAAY;EACZ,8BAA8B;AAChC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mKAAmK;EACnK,qBAAqB;EACrB,4BAA4B;EAC5B,sBAAsB;EACtB,UAAU;EACV,uBAAuB;EACvB,aAAa;EACb,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,sBAAsB;AACxB;;;AAGA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,YAAY;EACZ,sBAAsB;;AAExB;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,kBAAkB;EAClB,gCAAgC;EAChC,eAAe;EACf,sBAAsB;EACtB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,WAAW;AACb;CACC;EACC,kBAAkB;EAClB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,0BAA0B;AAC5B;AACA;EACE,gBAAgB;EAChB,iBAAiB;AACnB;AACA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;EAChB,YAAY;EACZ,mDAAmD;EACnD,sBAAsB;EACtB,mBAAmB;EACnB,2BAA2B;EAC3B,eAAe;EACf,gBAAgB;;AAElB;AACA;EACE,cAAc;EACd,UAAU;EACV,iBAAiB;;AAEnB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,cAAc;EACd,aAAa;EACb,UAAU;EACV,kBAAkB;EAClB,sBAAsB;EACtB,+BAA+B;EAC/B,WAAW;AACb;AACA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,eAAe;;AAEjB;AACA;EACE,qCAAqC;EACrC,iBAAiB;AACnB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap');\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: 'Permanent Marker', Sans-serif, Arial;\r\n  color: black;\r\n  text-shadow: 8px 4px 8px  #eee;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-image: linear-gradient(rgba(255,255,255,0.4), rgba(255,255,255,0.4)), url(https://wallup.net/wp-content/uploads/2015/06/Fantasy-library-art-748x435.jpg);\r\n  filter: contrast(1.5);\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  width: 80%;\r\n  border: 2px solid black;\r\n  margin:0 auto;\r\n  height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n\r\nheader {\r\n  margin-top: -10%;\r\n  text-align: center;\r\n}\r\nmain {\r\n  margin-top: 10%;\r\n  display:flex;\r\n  flex-direction: column;\r\n\r\n}\r\n\r\n#title {\r\n  all: unset;\r\n  max-width: 300px;\r\n  align-self: center;\r\n  box-shadow: 2px 2px 4px 6px #eee;\r\n  margin-top: 5px;\r\n  border: 1px solid #000;\r\n  height: 30px;\r\n  border: 5px;\r\n}\r\n\r\n#title::placeholder {\r\n  text-align: center;\r\n  color: #000;\r\n}\r\n label{\r\n  align-self: center;\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n}\r\n\r\n#title:focus {\r\n  background-color:lightpink;\r\n}\r\n.list {\r\n  list-style: none;\r\n  margin-left: 10px;\r\n}\r\n.list a {\r\n  color: #000;\r\n  margin: 10px;\r\n}\r\n\r\n#search-btn {\r\n  all: unset;\r\n  max-width: 200px;\r\n  align-self: center;\r\n  text-align: center;\r\n  margin-top: 13px;\r\n  padding: 5px;\r\n  background: linear-gradient(to left, green, yellow);\r\n  border: 1px solid #000;\r\n  border-radius: 15px;\r\n  box-shadow: 0 5px 8px green;\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n\r\n}\r\n#display-list {\r\n  margin: 0 auto;\r\n  width: 80%;\r\n  text-align:center;\r\n\r\n}\r\n.display-plot {\r\n  display: none;\r\n  background-color: black;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n  width: 60%;\r\n  text-align: center;\r\n  border: 2px solid #000;\r\n  box-shadow: 0 5px 8px 10px #eee;\r\n  color: #fff;\r\n}\r\n#close-btn {\r\n  width: 20px;\r\n  height: 20px;\r\n  text-align: center;\r\n  cursor: pointer;\r\n\r\n}\r\n.plot {\r\n  font: italic bold 18px Georgia, serif;\r\n  text-shadow: none;\r\n}\r\n"],sourceRoot:""}]);const c=a},645:t=>{"use strict";t.exports=function(t){var r=[];return r.toString=function(){return this.map((function(r){var n="",e=void 0!==r[5];return r[4]&&(n+="@supports (".concat(r[4],") {")),r[2]&&(n+="@media ".concat(r[2]," {")),e&&(n+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),n+=t(r),e&&(n+="}"),r[2]&&(n+="}"),r[4]&&(n+="}"),n})).join("")},r.i=function(t,n,e,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(e)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);e&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),r.push(u))}},r}},537:t=>{"use strict";t.exports=function(t){var r=t[1],n=t[3];if(!n)return r;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),i="/*# ".concat(o," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[r].concat(a).concat([i]).join("\n")}return[r].join("\n")}},208:(t,r,n)=>{var e,o="__lodash_hash_undefined__",i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/,c=/^\./,s=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,l=/\\(\\)?/g,u=/^\[object .+?Constructor\]$/,p="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,f="object"==typeof self&&self&&self.Object===Object&&self,d=p||f||Function("return this")(),h=Array.prototype,A=Function.prototype,g=Object.prototype,y=d["__core-js_shared__"],v=(e=/[^.]+$/.exec(y&&y.keys&&y.keys.IE_PROTO||""))?"Symbol(src)_1."+e:"",m=A.toString,x=g.hasOwnProperty,b=g.toString,E=RegExp("^"+m.call(x).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),C=d.Symbol,B=h.splice,w=U(d,"Map"),_=U(Object,"create"),k=C?C.prototype:void 0,j=k?k.toString:void 0;function L(t){var r=-1,n=t?t.length:0;for(this.clear();++r<n;){var e=t[r];this.set(e[0],e[1])}}function S(t){var r=-1,n=t?t.length:0;for(this.clear();++r<n;){var e=t[r];this.set(e[0],e[1])}}function O(t){var r=-1,n=t?t.length:0;for(this.clear();++r<n;){var e=t[r];this.set(e[0],e[1])}}function T(t,r){for(var n,e,o=t.length;o--;)if((n=t[o][0])===(e=r)||n!=n&&e!=e)return o;return-1}function P(t,r){var n,e,o=t.__data__;return("string"==(e=typeof(n=r))||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n)?o["string"==typeof r?"string":"hash"]:o.map}function U(t,r){var n=function(t,r){return null==t?void 0:t[r]}(t,r);return function(t){if(!Y(t)||v&&v in t)return!1;var r=function(t){var r=Y(t)?b.call(t):"";return"[object Function]"==r||"[object GeneratorFunction]"==r}(t)||function(t){var r=!1;if(null!=t&&"function"!=typeof t.toString)try{r=!!(t+"")}catch(t){}return r}(t)?E:u;return r.test(function(t){if(null!=t){try{return m.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t))}(n)?n:void 0}L.prototype.clear=function(){this.__data__=_?_(null):{}},L.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},L.prototype.get=function(t){var r=this.__data__;if(_){var n=r[t];return n===o?void 0:n}return x.call(r,t)?r[t]:void 0},L.prototype.has=function(t){var r=this.__data__;return _?void 0!==r[t]:x.call(r,t)},L.prototype.set=function(t,r){return this.__data__[t]=_&&void 0===r?o:r,this},S.prototype.clear=function(){this.__data__=[]},S.prototype.delete=function(t){var r=this.__data__,n=T(r,t);return!(n<0||(n==r.length-1?r.pop():B.call(r,n,1),0))},S.prototype.get=function(t){var r=this.__data__,n=T(r,t);return n<0?void 0:r[n][1]},S.prototype.has=function(t){return T(this.__data__,t)>-1},S.prototype.set=function(t,r){var n=this.__data__,e=T(n,t);return e<0?n.push([t,r]):n[e][1]=r,this},O.prototype.clear=function(){this.__data__={hash:new L,map:new(w||S),string:new L}},O.prototype.delete=function(t){return P(this,t).delete(t)},O.prototype.get=function(t){return P(this,t).get(t)},O.prototype.has=function(t){return P(this,t).has(t)},O.prototype.set=function(t,r){return P(this,t).set(t,r),this};var M=F((function(t){var r;t=null==(r=t)?"":function(t){if("string"==typeof t)return t;if(G(t))return j?j.call(t):"";var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}(r);var n=[];return c.test(t)&&n.push(""),t.replace(s,(function(t,r,e,o){n.push(e?o.replace(l,"$1"):r||t)})),n}));function I(t){if("string"==typeof t||G(t))return t;var r=t+"";return"0"==r&&1/t==-1/0?"-0":r}function F(t,r){if("function"!=typeof t||r&&"function"!=typeof r)throw new TypeError("Expected a function");var n=function(){var e=arguments,o=r?r.apply(this,e):e[0],i=n.cache;if(i.has(o))return i.get(o);var a=t.apply(this,e);return n.cache=i.set(o,a),a};return n.cache=new(F.Cache||O),n}F.Cache=O;var N=Array.isArray;function Y(t){var r=typeof t;return!!t&&("object"==r||"function"==r)}function G(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&"[object Symbol]"==b.call(t)}t.exports=function(t,r,n){var e=null==t?void 0:function(t,r){var n;r=function(t,r){if(N(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!G(t))||a.test(t)||!i.test(t)||null!=r&&t in Object(r)}(r,t)?[r]:N(n=r)?n:M(n);for(var e=0,o=r.length;null!=t&&e<o;)t=t[I(r[e++])];return e&&e==o?t:void 0}(t,r);return void 0===e?n:e}},379:t=>{"use strict";var r=[];function n(t){for(var n=-1,e=0;e<r.length;e++)if(r[e].identifier===t){n=e;break}return n}function e(t,e){for(var i={},a=[],c=0;c<t.length;c++){var s=t[c],l=e.base?s[0]+e.base:s[0],u=i[l]||0,p="".concat(l," ").concat(u);i[l]=u+1;var f=n(p),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)r[f].references++,r[f].updater(d);else{var h=o(d,e);e.byIndex=c,r.splice(c,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(t,r){var n=r.domAPI(r);return n.update(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap&&r.supports===t.supports&&r.layer===t.layer)return;n.update(t=r)}else n.remove()}}t.exports=function(t,o){var i=e(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var c=n(i[a]);r[c].references--}for(var s=e(t,o),l=0;l<i.length;l++){var u=n(i[l]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}i=s}}},569:t=>{"use strict";var r={};t.exports=function(t,n){var e=function(t){if(void 0===r[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}r[t]=n}return r[t]}(t);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var r=document.createElement("style");return t.setAttributes(r,t.attributes),t.insert(r,t.options),r}},565:(t,r,n)=>{"use strict";t.exports=function(t){var r=n.nc;r&&t.setAttribute("nonce",r)}},795:t=>{"use strict";t.exports=function(t){var r=t.insertStyleElement(t);return{update:function(n){!function(t,r,n){var e="";n.supports&&(e+="@supports (".concat(n.supports,") {")),n.media&&(e+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(e+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),e+=n.css,o&&(e+="}"),n.media&&(e+="}"),n.supports&&(e+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(e,t,r.options)}(r,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(r)}}}},589:t=>{"use strict";t.exports=function(t,r){if(r.styleSheet)r.styleSheet.cssText=t;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}}}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={id:e,exports:{}};return t[e](i,i.exports,n),i.exports}n.n=t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return n.d(r,{a:r}),r},n.d=(t,r)=>{for(var e in r)n.o(r,e)&&!n.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),n.nc=void 0,(()=>{"use strict";var t=n(379),r=n.n(t),e=n(795),o=n.n(e),i=n(569),a=n.n(i),c=n(565),s=n.n(c),l=n(216),u=n.n(l),p=n(589),f=n.n(p),d=n(426),h={};function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function g(){g=function(){return t};var t={},r=Object.prototype,n=r.hasOwnProperty,e="function"==typeof Symbol?Symbol:{},o=e.iterator||"@@iterator",i=e.asyncIterator||"@@asyncIterator",a=e.toStringTag||"@@toStringTag";function c(t,r,n){return Object.defineProperty(t,r,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{c({},"")}catch(t){c=function(t,r,n){return t[r]=n}}function s(t,r,n,e){var o=r&&r.prototype instanceof p?r:p,i=Object.create(o.prototype),a=new w(e||[]);return i._invoke=function(t,r,n){var e="suspendedStart";return function(o,i){if("executing"===e)throw new Error("Generator is already running");if("completed"===e){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var c=E(a,n);if(c){if(c===u)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===e)throw e="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);e="executing";var s=l(t,r,n);if("normal"===s.type){if(e=n.done?"completed":"suspendedYield",s.arg===u)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(e="completed",n.method="throw",n.arg=s.arg)}}}(t,n,a),i}function l(t,r,n){try{return{type:"normal",arg:t.call(r,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var u={};function p(){}function f(){}function d(){}var h={};c(h,o,(function(){return this}));var y=Object.getPrototypeOf,v=y&&y(y(_([])));v&&v!==r&&n.call(v,o)&&(h=v);var m=d.prototype=p.prototype=Object.create(h);function x(t){["next","throw","return"].forEach((function(r){c(t,r,(function(t){return this._invoke(r,t)}))}))}function b(t,r){function e(o,i,a,c){var s=l(t[o],t,i);if("throw"!==s.type){var u=s.arg,p=u.value;return p&&"object"==A(p)&&n.call(p,"__await")?r.resolve(p.__await).then((function(t){e("next",t,a,c)}),(function(t){e("throw",t,a,c)})):r.resolve(p).then((function(t){u.value=t,a(u)}),(function(t){return e("throw",t,a,c)}))}c(s.arg)}var o;this._invoke=function(t,n){function i(){return new r((function(r,o){e(t,n,r,o)}))}return o=o?o.then(i,i):i()}}function E(t,r){var n=t.iterator[r.method];if(void 0===n){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=void 0,E(t,r),"throw"===r.method))return u;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var e=l(n,t.iterator,r.arg);if("throw"===e.type)return r.method="throw",r.arg=e.arg,r.delegate=null,u;var o=e.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=void 0),r.delegate=null,u):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,u)}function C(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function B(t){var r=t.completion||{};r.type="normal",delete r.arg,t.completion=r}function w(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function _(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,i=function r(){for(;++e<t.length;)if(n.call(t,e))return r.value=t[e],r.done=!1,r;return r.value=void 0,r.done=!0,r};return i.next=i}}return{next:k}}function k(){return{value:void 0,done:!0}}return f.prototype=d,c(m,"constructor",d),c(d,"constructor",f),f.displayName=c(d,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var r="function"==typeof t&&t.constructor;return!!r&&(r===f||"GeneratorFunction"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,c(t,a,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},x(b.prototype),c(b.prototype,i,(function(){return this})),t.AsyncIterator=b,t.async=function(r,n,e,o,i){void 0===i&&(i=Promise);var a=new b(s(r,n,e,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(m),c(m,a,"Generator"),c(m,o,(function(){return this})),c(m,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var r=[];for(var n in t)r.push(n);return r.reverse(),function n(){for(;r.length;){var e=r.pop();if(e in t)return n.value=e,n.done=!1,n}return n.done=!0,n}},t.values=_,w.prototype={constructor:w,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(B),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function e(n,e){return a.type="throw",a.arg=t,r.next=n,e&&(r.method="next",r.arg=void 0),!!e}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return e("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),s=n.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return e(i.catchLoc,!0);if(this.prev<i.finallyLoc)return e(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return e(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return e(i.finallyLoc)}}}},abrupt:function(t,r){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method="next",this.next=i.finallyLoc,u):this.complete(a)},complete:function(t,r){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&r&&(this.next=r),u},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),B(n),u}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc===t){var e=n.completion;if("throw"===e.type){var o=e.arg;B(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:_(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=void 0),u}},t}function y(t,r,n,e,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void n(t)}c.done?r(s):Promise.resolve(s).then(e,o)}function v(t){return function(){var r=this,n=arguments;return new Promise((function(e,o){var i=t.apply(r,n);function a(t){y(i,e,o,a,c,"next",t)}function c(t){y(i,e,o,a,c,"throw",t)}a(void 0)}))}}h.styleTagTransform=f(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),r()(d.Z,h),d.Z&&d.Z.locals&&d.Z.locals,n(208);var m,x,b=document.getElementById("title"),E=document.getElementById("search-btn"),C=document.getElementById("list"),B=document.querySelector(".display-plot"),w=document.getElementById("close-btn"),_=[],k=[];function j(){var t=function(){var t=v(g().mark((function t(){var r,n,e;return g().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,r="https://openlibrary.org".concat(x,".json"),t.next=4,fetch(r);case 4:return n=t.sent,t.next=7,n.json();case 7:return e=t.sent,console.log(e.description),t.abrupt("return",e);case 12:t.prev=12,t.t0=t.catch(0),console.log(t.t0),alert(t.t0);case 16:case"end":return t.stop()}}),t,null,[[0,12]])})));return function(){return t.apply(this,arguments)}}();t().then((function(t){var r=t.description;console.log(A(r)),m=document.createElement("p"),B.style.display="block",B.appendChild(m),m.classList.add("plot"),m.textContent=""===r?t.description:t.description.value,w.addEventListener("click",(function(){B.style.display="none",L()}))}))}b.addEventListener("keyup",(function(t){var r=t.target.value.toLowerCase();console.log(r),k=_.filter((function(t){return t.authors[0].name.toLowerCase().includes(r)||t.title.toLowerCase().includes(r)})),console.log(k)})),b.addEventListener("keypress",(function(t){"Enter"===t.key&&(t.preventDefault(),E.click())})),E.addEventListener("click",(function(){C.innerHTML=" ",k.length>0?k.forEach((function(t){var r=document.createElement("li");r.style.cssText="list-style: none; margin-left: 10px;";var n=document.createElement("a");n.style.cssText="color: #000; margin: 10px;",n.id="plot",n.href="# ",r.addEventListener("click",j),C.append(r),r.append(n),n.textContent="".concat(t.authors[0].name," : ").concat(t.title),x=t.key})):C.textContent="No matches found",b.value=" "})),function(){var t=v(g().mark((function t(){var r,n;return g().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=5,fetch("https://openlibrary.org/subjects/fantasy.json");case 5:return r=t.sent,t.next=8,r.json();case 8:return n=t.sent,t.abrupt("return",n);case 12:t.prev=12,t.t0=t.catch(0),console.error(t.t0),alert(t.t0);case 16:case"end":return t.stop()}}),t,null,[[0,12]])})));return function(){return t.apply(this,arguments)}}()().then((function(t){_=t.works}));var L=function(){m.innerHTML=" "}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,